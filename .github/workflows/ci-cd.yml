# FilterFox CI/CD Configuration
name: FilterFox Build and Deploy

# Trigger configuration
on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Daily build at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

# Environment variables
env:
  NODE_VERSION: '18'
  EXTENSION_NAME: 'filterfox'
  CHROME_EXTENSION_ID: 'abcdefghijklmnopqrstuvwxyz123456'
  FIREFOX_EXTENSION_ID: '{12345678-1234-1234-1234-123456789012}'

# Job definitions
jobs:
  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        check: [lint, format, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        if: matrix.check == 'lint'
        run: npm run lint
        
      - name: Check code formatting
        if: matrix.check == 'format'
        run: npm run format -- --check
        
      - name: Security audit
        if: matrix.check == 'security'
        run: npm audit --audit-level moderate

  # Run tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        browser: [chrome, firefox]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm run test:coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          
      - name: Build extension
        run: npm run build
        
      - name: Setup browser for testing
        uses: browser-actions/setup-chrome@latest
        if: matrix.browser == 'chrome'
        
      - name: Setup Firefox
        uses: browser-actions/setup-firefox@latest
        if: matrix.browser == 'firefox'
        
      - name: Run integration tests
        run: npm run test:integration -- --browser=${{ matrix.browser }}

  # Build extension for different platforms
  build:
    name: Build Extension
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    strategy:
      matrix:
        target: [chrome, firefox, edge]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build extension
        run: npm run build
        
      - name: Package for Chrome
        if: matrix.target == 'chrome'
        run: npm run pack
        
      - name: Package for Firefox
        if: matrix.target == 'firefox'
        run: npm run pack:firefox
        
      - name: Package for Edge
        if: matrix.target == 'edge'
        run: npm run pack:edge
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.EXTENSION_NAME }}-${{ matrix.target }}-${{ github.sha }}
          path: releases/
          retention-days: 30

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript

  # Deploy to store
  deploy:
    name: Deploy to Stores
    runs-on: ubuntu-latest
    needs: [build, security]
    if: startsWith(github.ref, 'refs/tags/v')
    
    strategy:
      matrix:
        store: [chrome, firefox, edge]
        
    environment:
      name: production
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.EXTENSION_NAME }}-${{ matrix.store }}-${{ github.sha }}
          path: releases/
          
      - name: Deploy to Chrome Web Store
        if: matrix.store == 'chrome'
        uses: mnao305/chrome-extension-upload@v4.0.1
        with:
          file-path: releases/${{ env.EXTENSION_NAME }}-chrome.zip
          extension-id: ${{ env.CHROME_EXTENSION_ID }}
          client-id: ${{ secrets.CHROME_CLIENT_ID }}
          client-secret: ${{ secrets.CHROME_CLIENT_SECRET }}
          refresh-token: ${{ secrets.CHROME_REFRESH_TOKEN }}
          
      - name: Deploy to Firefox Add-ons
        if: matrix.store == 'firefox'
        uses: trmcnvn/firefox-addon@v1
        with:
          uuid: ${{ env.FIREFOX_EXTENSION_ID }}
          xpi: releases/${{ env.EXTENSION_NAME }}-firefox.zip
          manifest: dist/manifest.json
          api-key: ${{ secrets.FIREFOX_API_KEY }}
          api-secret: ${{ secrets.FIREFOX_API_SECRET }}

  # Create GitHub release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: deploy
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: releases/
          
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: FilterFox ${{ github.ref }}
          body: |
            ## What's New in FilterFox ${{ github.ref }}
            
            ### Features
            - Enhanced ad blocking performance
            - Improved tracker detection
            - Better memory efficiency
            
            ### Bug Fixes
            - Fixed popup display issues
            - Resolved content script conflicts
            - Improved filter list updates
            
            ### Download
            - [Chrome Extension](https://chrome.google.com/webstore/detail/${{ env.CHROME_EXTENSION_ID }})
            - [Firefox Add-on](https://addons.mozilla.org/addon/filterfox/)
            
            **Full Changelog**: https://github.com/filterfox/filterfox/compare/v1.0.0...${{ github.ref }}
          draft: false
          prerelease: false